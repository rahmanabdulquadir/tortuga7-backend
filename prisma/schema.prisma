// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String?
  lastName      String?
  contactNo     String?
  role          Role           @default(CLIENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  resetToken    String?
  resetTokenExp DateTime?
  consultations Consultation[]
}

model Profile {
  id      String  @id @default(uuid())
  name    String
  phone   String?
  company String?
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique
}

model Service {
  id          String    @id @default(uuid())
  title       String
  description String
  products    Product[] // A service has many products
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String   @id @default(uuid())
  productName     String
  productModel    String
  brandName       String
  slug            String
  description     String
  filters         Json?
  keyApplications String[]
  keyFeatures     String[]
  image           String?
  images          String[]
  price           Float
  available       Boolean

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])

  specs Spec[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Spec {
  id          String  @id @default(uuid())
  title       String
  description String?
  data        Json

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Consultation {
  id          String   @id @default(uuid())
  topic       String
  message     String
  status      String   @default("pending")
  scheduledAt DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Consultant {
  id            String   @id @default(uuid())
  fullName      String
  email         String
  company       String?
  phone         String
  preferredDate DateTime
  preferredTime String
  message       String
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Booking {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String
  productName String
  quantity    Int
  address     String
  postalCode  String
  country     String
  createdAt   DateTime @default(now())
}

model Blog {
  id         String   @id @default(uuid())
  title      String
  content    String
  finalWords String
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  phone     String?
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  CLIENT
  STAFF
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
